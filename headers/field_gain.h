#ifndef HAC_FIELD_GAIN_H
#define HAC_FIELD_GAIN_H

#include "main.h"
#include <complex>
#include <map>

HAC_LIBRARY_NAMESPACE
{
	struct HAC_EXPORT field_gain	//! выходная структура поля в лучевом представлении
	{
		struct ray_desc	//! описание луча, пришедшего не приемник
		{
			float angle_em;	//!< угол скольжения выхода из источника, рад.
			float angle_rcv;	//!< угол скольжения на входе приёмника, рад.

			float time;	//!< время распространения луча от источника до прёмника, с
			float length;	//!< длина пути распространения луча от источника до прёмника, м
			
			// коэффициент усиления (не по мощности!!!!!!!!! sqrt из неё), ед.
			float gain_incoh;	//!< коэффициент усиления для некогерентного излучения
			std::complex<float> gain_coh;	//!< коэффициент усиления для когерентного излучения (учет фазы, дает более точную картину)

			float phase;	//!< дополнительный фазовый сдвиг сигнала получаемый из-за отражений, каустик и тд (не нормированный), рад
			// чтобы получить полный фазовый сдвиг надо добавить time*2*pi*freq
		};
		
		enum class types_coh		//! типы возможных расчетов кооэфициентов затухания
		{
			coherent,		//!< источник когерентного сигнала
			incoherent,		//!< источник некогерентного сигнала
		} type_coh = types_coh::coherent;	//!< тип расчета кооэфициентов затухания

		std::multimap<float, ray_desc> rays;	//!< описание лучевой структуры передаточного коэффициента канала, 
		// ключ - gain - коэффициент усиления, значение - ray_desc - описание передаточного коэффициента по лучу 
		float c_em;		//!< скорость звука в точке излучения, м/с
		float c_rcv;	//!< скорость звука в точке приёма, м/с
		float freq;		//!< частота расчетов, Гц

		// !!!не самые нужные вещи, мы их задаем вначале
		float depth_em;	//!< глубина источника, м
		float depth_rcv;	//!< глубина приёмника, м
		float dist;	//!< горизонтальное расстояние от источника до приёмника, м

		error const get_gain_extr(
			float&	// сдвиг по дальности (+/- в зависимости от изменения параметра) от расстояния между источником и приёмником, м
			,float&	// сдвиг по глубине (+/- в зависимости от изменения параметра) от глубины риёмника, м
			,field_gain&	// возвращаемое значение передаточного коэффициента канала
			)const;	//!< экстраполяция передаточного коэффициента канала в предположении однородности поля (постоянства скорости звука)
	};

	std::ostream HAC_EXPORT &operator << (std::ostream& _stream, const field_gain &_field_gain);	//!< запись в поток
};

#endif /*HAC_FIELD_GAIN_H*/
